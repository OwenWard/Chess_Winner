---
title: "Model Checking"
author: Owen G. Ward
date: 04/17/2023
format: 
  # html:
  #   toc: true
  #   toc-location: left
  pdf
bibliography: refs.bib
---


```{r setup}
#| include: false

knitr::opts_chunk$set(echo = FALSE, message = FALSE)

library(tidyverse)
library(RcppRoll)
library(cmdstanr)
library(bayesplot)

theme_set(theme_bw())

```



## Permuting Data

A quick sanity check on the existing model is to see if there are 
still strong winner and loser effects present when we permute the 
ordering of the events. This can be checked quite easily.


```{r clean lichess data}
#| warning: false

lichess_data <- readRDS("../../rdata/lichess_pilot.RData")

bullet_60 <- lichess_data %>% 
  filter(Event == "Rated Bullet game") %>% 
  filter(TimeControl == "60+0")


get_hist <- function(user, games, prev_n) {
  hist_games <- games %>% 
    filter(White == user | Black == user) %>% 
    arrange(UTCDate, UTCTime) %>% 
    mutate(focal_white = ifelse(Username == White, 1, 0)) %>% 
    select(White:BlackElo, focal_white) %>% 
    mutate(focal_result = case_when(
      (focal_white == 1 & Result == "1-0") ~ 1,
      (focal_white == 0 & Result == "0-1") ~ 1,
      (Result == "1/2-1/2") ~ 0.5,
      .default = 0
      )) %>% 
    mutate(focal_win_prop = c(cumsum(focal_result[1:(prev_n - 1)])/(1:(prev_n -1)), 
                              roll_mean(focal_result, n = prev_n)))
  hist_games
}


focal_players <- head(sort(table(c(bullet_60$Username)), decreasing = TRUE), 18)
## if don't use all focal players here then removing data because they won't be
## involved

top_players <- names(focal_players)


tidy_games <- map_dfr(top_players, get_hist, bullet_60, prev_n = 10) %>% 
  as_tibble()

```



```{r permute results}

## need to do this inside the `get_hist` function

## permute the results of all games for a given player before then
## computing the current win proportion

get_hist_perm <- function(user, games, prev_n) {
  hist_games <- games %>% 
    filter(White == user | Black == user) %>% 
    arrange(UTCDate, UTCTime) %>% 
    mutate(focal_white = ifelse(Username == White, 1, 0)) %>% 
    select(White:BlackElo, focal_white) %>% 
    mutate(focal_result = case_when(
      (focal_white == 1 & Result == "1-0") ~ 1,
      (focal_white == 0 & Result == "0-1") ~ 1,
      (Result == "1/2-1/2") ~ 0.5,
      .default = 0
      )) %>% 
    mutate(perm_result = sample(focal_result)) %>% 
    mutate(perm_win_prop = c(cumsum(perm_result[1:(prev_n - 1)])/(1:(prev_n -1)), 
                              roll_mean(perm_result, n = prev_n)))
  hist_games
}

perm_games <- map_dfr(top_players, get_hist_perm, bullet_60, prev_n = 10) %>% 
  as_tibble()
```


```{r}
tidy_games %>% 
  ggplot(aes(focal_win_prop)) + geom_histogram() +
  labs(title = "True Win Proportions")

perm_games %>% 
  ggplot(aes(perm_win_prop)) + geom_histogram() +
  labs(title = "Permuted Win Proportions")

## there is some sort of difference here, but not sure how big it is 

```


Can also plot the current previous $n$ win proportion over time. 
Under the permuted model this should look more like random noise.

```{r}

perm_games %>% 
  mutate(focal_user = ifelse(focal_white == 1, White, Black)) %>% 
  group_by(focal_user) %>% 
  mutate(index = row_number()) %>% 
  ggplot(aes(index, perm_win_prop, colour = focal_user)) +
  geom_line() +
  facet_wrap(~focal_user, scales = "free_x") +
  labs(title = "Permuted Games")

tidy_games %>% 
  mutate(focal_user = ifelse(focal_white == 1, White, Black)) %>% 
  group_by(focal_user) %>% 
  mutate(index = row_number()) %>% 
  ggplot(aes(index, focal_win_prop, colour = focal_user)) +
  geom_line() +
  facet_wrap(~focal_user, scales = "free_x") +
  labs(title = "Original Data")


## these look more random anyway

```


Now let's fit the stan model to the permuted data and investigate what
the effects are.


```{r get stan data permuted}

perm_init_data <- perm_games %>% 
  mutate(WhiteElo = as.numeric(WhiteElo), 
         BlackElo = as.numeric(BlackElo)) %>% 
  mutate(focal_user = ifelse(focal_white == 1, White, Black)) %>% 
  mutate(elo_diff = ifelse(focal_white == 1, 
                           WhiteElo - BlackElo, BlackElo - WhiteElo)) %>% 
  mutate(focal_id = match(focal_user, top_players)) %>% 
  select(focal_user, focal_id, focal_white, 
         perm_win_prop, elo_diff, perm_result) %>% 
  group_by(focal_id) %>% 
  mutate(ave_prop = lag(perm_win_prop, default = 0) - mean(perm_win_prop)) %>% 
  filter(perm_result != 0.5)


perm_init_data



stan_data_ave <- list(N = nrow(perm_init_data),
                  J = length(top_players),
                  y = perm_init_data$perm_result,
                  id = perm_init_data$focal_id,
                  colour = perm_init_data$focal_white,
                  elo = perm_init_data$elo_diff,
                  win_prop = perm_init_data$ave_prop)

```


```{r fit stan model}
#| eval: false

stan_file <- "../model3.stan"

mod <- cmdstan_model(stan_file)

fit3_ave <- mod$sample(data = stan_data_ave,
                  seed = 123,
                  chains = 4,
                  parallel_chains = 4,
                  refresh = 100)


fit3_ave$save_object("../model_fits/perm_model_n10.RDS")
```

Then we want to compare the estimates from this permuted model to the true 
data.


```{r}

fit3_ave <- readRDS("../model_fits/perm_model_n10.RDS")
fit3_orig <- readRDS("../model_fits/init_model_n10.RDS")


fit3_ave$summary()


mcmc_hist(fit3_ave$draws(c("beta", "mu1", "tau1", "gamma1", "gamma2")))

mcmc_hist(fit3_orig$draws(c("beta", "mu1", "tau1", "gamma1", "gamma2")))
```

So, when we permute the data in this way, get the same winner/loser effects.
This means its not a real effect. What could be causing this?


- Weird data sample?

- Not controlling for some other important predictors?

- The magnitude of these effects is the same also, which indicates its a problem

- Did I permute the data the right way then?



What about if the history is simply uniform on the [-1, 1]. What sort of
effects do you see then?

```{r}
#| eval: false
stan_data_rand <- list(N = nrow(perm_init_data),
                  J = length(top_players),
                  y = perm_init_data$perm_result,
                  id = perm_init_data$focal_id,
                  colour = perm_init_data$focal_white,
                  elo = perm_init_data$elo_diff,
                  win_prop = perm_init_data$ave_prop)

random_win_prop <- runif(n = stan_data_rand$N, min = -1)

stan_data_rand$win_prop <- random_win_prop


fit3_rand <- mod$sample(data = stan_data_rand,
                  seed = 123,
                  chains = 4,
                  parallel_chains = 4,
                  refresh = 100)

fit3_rand$save_object(file = "../model_fits/unif_hist.RDS")

```


```{r}

fit3_rand <- readRDS("../model_fits/unif_hist.RDS")

mcmc_hist(fit3_rand$draws(c("beta", "mu1", "tau1", "gamma1", "gamma2")))

fit3_rand$summary()

```


